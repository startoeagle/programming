#include <stdio.h>

int is_pal(char * s, unsigned int len_s){
  for (int i = 0; i < len_s/2; i++){
    if(s[len_s - i] == s[i])
      return 0;
  }
  return 1;
  
}

int main(){
  int n; // number of strings
  char strings[1000][100]; // the different strings

  int r = scanf("%d", &n);
  while(r==1 && r != EOF){
    // read the strings
    for (int i = 0; i < n; i++) {
      // use getchar() here
      j = 0;
  
      scanf("%s", string[]);

    printf("Got the strings: \n");
    for (int i = 0; i < n; i++)
      printf("%s\n", strings[i]);
    
 
    r = scanf("%d", &n);
  }

  
  return 0;
}

  /*
  Given a string S, find the longest palindromic substring in S.

Substring of string S:

S[ i . . . . j ] where 0 ≤ i ≤ j < len(S)

Palindrome string:

A string which reads the same backwards. More formally, S is palindrome if reverse(S) = S.

Incase of conflict, return the substring which occurs first ( with the least starting index ).

NOTE: Required Time Complexity O(n2).

Input:

The first line of input consists number of the test cases. The following T lines consist of a string each.


Output:

In each separate line print the longest palindrome of the string given in the respective test case.


Constraints:

1 ≤T≤ 100
1 ≤ Str Length≤ 104

Example:

Input:
1
aaaabbaa

Output:

aabbaa


										    */
